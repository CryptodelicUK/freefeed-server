{"name":"Pepyatka","tagline":"Open source FriendFeed clone.","body":"Pepyatka\r\n========\r\n\r\nPepyatka is another attempt to open source FriendFeed social\r\nnetwork/aggregator. At this stage it's a semi-anonymous imageboard.\r\n\r\n![Pepyatka screenshot](http://epicmonkey.org/b/2013-03-10_Pepyatka.png)\r\n\r\nConfiguration\r\n-------------\r\n\r\n- Install redis\r\n- Install graphicsmagick (ensure jpeg and png flags are set)\r\n- Install nodejs\r\n- Install elasticsearch (and java as a dependency ;-)\r\n- Install forever: npm install -g forever\r\n- Make sure to update secret token: cp ./conf/envDefault.js to\r\n  ./conf/envLocal.js.\r\n- Install dependencies: npm install\r\n- Update translation file: cp ./public/config/envDefault.js\r\n  ./public/config/envLocal.js\r\n- Check there are no broken tests: jake test\r\n- Run elasticsearch\r\n- Run server: node ./server.js\r\n- Run search daemon: node ./bin/search-daemon.js\r\n\r\nRoadmap\r\n-------\r\n\r\nTasks: https://trello.com/b/uvRkkOTH\r\n\r\nDatabase\r\n--------\r\n\r\n```\r\nusername:<username>:uid\r\n\r\ntype is a enum of set of { \"user\", \"group\" } # not implemented yet\r\n\r\nuser:<userId> { username, hashedPassword, salt, createdAt, updatedAt, type }\r\nuser:<userId>:timelines { RiverOfNews, Posts, Likes, Comments, DirectMessages, [name*] }\r\nuser:<userId>:administrators { <userId>:<timestamp> } # not implemented yet\r\n* DirectMessages not implemented yet\r\n* Custom lists not implemented yet\r\nuser:<userId>:subscriptions ( <timelineId>:<timestamp> )\r\n\r\nreserved usernames:\r\n- anonymous\r\n- everyone\r\n\r\ntimeline:<timelineId> { name, userId }\r\ntimeline:<timelineId>:posts ( <postId>:<timestamp> )\r\ntimeline:<timelineId>:subscribers ( <userId>:<timestamp> )\r\n\r\nas special case there is timeline: timeline:everyone\r\n\r\npost:<postId> { body, createdAt, updatedAt, userId, timelineId }\r\npost:<postId>:comments [ <commentId> ]\r\npost:<postId>:attachments [ <attachmentId> ]\r\npost:<postId>:timelines ( <timelineId> )\r\npost:<postId>:likes ( <userId> )\r\n\r\ncomment:<commentId> { body, createdAt, updatedAt, createdBy, postId }\r\n\r\nattachment:<attachmentId> { mimeType, filename, extension, path, createdAt, updatedAt, postId, thumbnailId? }\r\n\r\nstats:<userId> { posts, likes, discussions, subscribers, subscriptions }\r\nstats:posts { <userId>:<posts> }\r\nstats:likes { <userId>:<likes> }\r\nstats:discussions { <userId>:<discussions> }\r\nstats:subscribers { <userId>:<subscribers> }\r\nstats:subscripions { <userId>:<subscriptions> }\r\n\r\ntags:<userId> { <tag>:<score> } # implemented only for everyone, see below\r\n\r\nas special case there are tags: tags:everyone\r\n```\r\n\r\nAPI\r\n---\r\n\r\n### Timeline\r\n- GET /v1/timeline/:username - returns all posts from user <username>\r\n- GET /v1/timeline/everyone - returns all posts from everyone\r\n- GET /v1/timeline - returns river of news for auth user\r\n- POST /v1/timeline/:timelineId/subscribe\r\n- POST /v1/timeline/:timelineId/unsubscribe\r\n- GET /v1/timeline/:timelineId/subcribers\r\n\r\n### Posts\r\n- GET /v1/posts/:postId\r\n- DELETE /v1/posts/:postId\r\n- PATCH /v1/posts/:postId\r\n- GET /v1/posts/:postId/comments # not implemented yet\r\n- GET /v1/posts/:postId/likes # not implemented yet\r\n- POST /v1/posts\r\n- POST /v1/posts/:postId/like\r\n- POST /v1/posts/:postId/unlike\r\n\r\n### Comments\r\n- POST /v1/comments\r\n- DELETE /v1/comments/:commentId\r\n- PATCH /v1/comments/:commentId\r\n\r\n### Users and groups\r\n- GET /v1/users/:userId\r\n- GET /v1/users/:username/subscriptions\r\n- GET /v1/users/:username/subscribers - returns Posts timeline subscribers\r\n- DELETE /v1/users/:username/subscribers/:userId - unsubscribe :userId from :username\r\n- POST /v1/users/:username/subscribers/:userId/admin - add admin rights for :userId to administrate :username\r\n- POST /v1/users/:username/subscribers/:userId/unadmin - remove admin rights from :userId to administrate :username\r\n- POST /v1/users # it's a dup of sign up\r\n- DELETE /v1/users/:userId\r\n- GET /v1/users/:userId/feedinfo\r\n- not implemented yet\r\n- PATCH /v1/users/:userId\r\n\r\n### Statistics\r\n- GET /v1/top/:category - returns an array of users with the highest\r\n  statistics in a category. Category could be one of { \"posts\",\r\n  \"likes\", \"discussions\", \"subscriptions\", \"subscribers\" }\r\n\r\nSEARCH API\r\n---\r\n\r\n- GET /v1/search/:searchQuery - returns all posts which equals searchQuery.\r\n\r\nSearch query is a string of keywords.\r\nKeywords:\r\n- intitle:query (search query in post's body)\r\n- incomment:query (search query in comment's body)\r\n- from:username (search by username)\r\n- AND\r\n- OR\r\n- ' ' (whitespace)\r\n\r\nIf you enter a search phrase that does not match keywords above,\r\nsearch engine will search it in post's and comment's bodies.\r\n\r\nExample: this AND intitle:that OR incomment:comment from:user. Search\r\nengine will return posts that contain 'that' in post's body and 'this'\r\nin post's or comment's body, also it will return posts that contain\r\n'comment' in comment's body and written by user 'user'.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}